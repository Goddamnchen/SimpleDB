package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private DbIterator inner, outter;
    private Tuple current;      // keep tracking the outter  to join

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.pred = p;
        this.outter = child1;
        this.inner = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        JoinPredicate pred = this.pred;
        return pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        TupleDesc td = outter.getTupleDesc();
        return td.getFieldName(pred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        TupleDesc td = inner.getTupleDesc();
        return td.getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc mergedTD = TupleDesc.merge(outter.getTupleDesc(), inner.getTupleDesc());
        return mergedTD;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.current = null;
        outter.open();
        inner.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        inner.close();
        outter.close();
        this.current = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        outter.rewind();
        inner.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // FIXME: Something wrong with null value of current
        while (outter.hasNext()) {
            current = outter.next();
            Tuple outterTuple;
            outterTuple = current;
            while (inner.hasNext())
            {
                Tuple innerTuple = inner.next();
                if (pred.filter(outterTuple, innerTuple)) {
                    return mergeTuple(outterTuple, innerTuple);
                }
            }
            inner.rewind();
        }
        return null;
    }
    private Tuple mergeTuple(Tuple left, Tuple right){
        Tuple mergedTuple = new Tuple(this.getTupleDesc());
        Iterator<Field> leftIt = left.fields();
        Iterator<Field> rightIt = right.fields();
        int index = 0;
        Field curField = null;
        while (leftIt.hasNext()) {
            curField = leftIt.next();
            mergedTuple.setField(index, curField);
            index ++;
        }
        while(rightIt.hasNext()) {
            curField = rightIt.next();
            mergedTuple.setField(index, curField);
            index ++;
        }
        return mergedTuple;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = new DbIterator[]{outter, outter};
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes
        outter = children[0];
        inner = children[1];
    }

}
