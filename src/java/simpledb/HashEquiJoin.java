package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private DbIterator outter, inner;
    transient private Tuple outterTuple = null;
    transient private Tuple innerTuple = null;

    // init when open()
    transient Iterator<Tuple> listIt = null;
    HashMap<Field, ArrayList<Tuple>> map = new HashMap<>();        // (key: outter tuple, value: matched inner tuple list)
    public final static int MAP_SIZE = 20000;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.pred = p;
        this.outter = child1;
        this.inner = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        JoinPredicate pred = this.pred;
        return pred;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td = TupleDesc.merge(outter.getTupleDesc(), inner.getTupleDesc());
        return td;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
        TupleDesc td = outter.getTupleDesc();
        return td.getFieldName(pred.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        TupleDesc td = inner.getTupleDesc();
        return td.getFieldName(pred.getField1());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        outter.open();
        inner.open();
        initMap();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        inner.close();
        outter.close();
        this.outterTuple = null;
        this.innerTuple = null;
        this.listIt = null;
        this.map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        inner.rewind();
        outter.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null && listIt.hasNext()) {
            return mergeTuple(listIt.next(), innerTuple);
        }
        // loop through all inner tuples
        while (inner.hasNext()) {
            innerTuple = inner.next();

            // if match, go through matched tuple list
            // return each tuple in the list after merging with corresponding outter tuple
            // if not exist corresponding field, skip to next inner tuple
            Field innerField = innerTuple.getField(pred.getField2());
            if (map.containsKey(innerField)) {
                ArrayList<Tuple> tupleList = map.get(innerField);
                listIt = tupleList.iterator();
                return mergeTuple(listIt.next(), innerTuple);
            } else {
                continue;
            }
        }

        // inner loop is done: go to next outter tuple
        inner.rewind();
        if (initMap()) {
            return fetchNext();
        }

        return null;
    }
    /**
     * Helper method used to join together the outter and inner tuple
     * The outter and inner should already be examined by equality predicate
     * @param left outter tuple
     * @param right inner tuple
     * @return the mergedTuple
     */
    private Tuple mergeTuple(Tuple left, Tuple right){
        Tuple mergedTuple = new Tuple(this.getTupleDesc());
        Iterator<Field> leftIt = left.fields();
        Iterator<Field> rightIt = right.fields();
        int index = 0;
        Field curField = null;
        while (leftIt.hasNext()) {
            curField = leftIt.next();
            mergedTuple.setField(index, curField);
            index ++;
        }
        while(rightIt.hasNext()) {
            curField = rightIt.next();
            mergedTuple.setField(index, curField);
            index ++;
        }
        return mergedTuple;
    }

    private boolean initMap() throws DbException, TransactionAbortedException {
        map.clear();
        int count = 0;
        while (outter.hasNext()) {
            outterTuple = outter.next();
            ArrayList<Tuple> list = map.get(outterTuple.getField(pred.getField1()));
            if (list == null) {
                list = new ArrayList<>();
                map.put(outterTuple.getField(pred.getField1()), list);
            }
            list.add(outterTuple);
            if (count++ == MAP_SIZE) return true;
        }
        return count > 0;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = new DbIterator[]{outter, outter};
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        outter = children[0];
        inner = children[1];
    }
    
}
