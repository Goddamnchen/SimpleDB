package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private DbIterator outter, inner;
    private Tuple current;
    transient private Tuple t1 = null;
    transient private Tuple t2 = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.pred = p;
        this.outter = child1;
        this.inner = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        JoinPredicate pred = this.pred;
        return pred;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td = TupleDesc.merge(outter.getTupleDesc(), inner.getTupleDesc());
        return td;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
        TupleDesc td = outter.getTupleDesc();
        return td.getFieldName(pred.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        TupleDesc td = inner.getTupleDesc();
        return td.getFieldName(pred.getField1());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.current = null;
        outter.open();
        inner.open();
        loadMap();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        inner.close();
        outter.close();
        this.current = null;
        this.t1 = null;
        this.t2 = null;
        this.listIt = null;
        this.map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        outter.rewind();
        inner.rewind();
    }

    transient Iterator<Tuple> listIt = null;
    HashMap<Object, ArrayList<Tuple>> map = new HashMap<Object, ArrayList<Tuple>>();
    public final static int MAP_SIZE = 20000;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null && listIt.hasNext()) {
            return processList();
        }

        // loop around child2
        while (inner.hasNext()) {
            t2 = inner.next();

            // if match, create a combined tuple and fill it with the values
            // from both tuples
            ArrayList<Tuple> l = map.get(t2.getField(pred.getField2()));
            if (l == null)
                continue;
            listIt = l.iterator();

            return processList();

        }

        // child2 is done: advance child1
        inner.rewind();
        if (loadMap()) {
            return fetchNext();
        }

        return null;
    }
    private Tuple processList() throws TransactionAbortedException, DbException {
        t1 = listIt.next();

        int td1n = t1.getTupleDesc().numFields();
        int td2n = t2.getTupleDesc().numFields();

        // set fields in combined tuple
        Tuple t = new Tuple(this.getTupleDesc());
        for (int i = 0; i < td1n; i++)
            t.setField(i, t1.getField(i));
        for (int i = 0; i < td2n; i++)
            t.setField(td1n + i, t2.getField(i));
        return t;

    }

    private boolean loadMap() throws DbException, TransactionAbortedException {
        int cnt = 0;
        map.clear();
        while (outter.hasNext()) {
            t1 = outter.next();
            ArrayList<Tuple> list = map.get(t1.getField(pred.getField1()));
            if (list == null) {
                list = new ArrayList<Tuple>();
                map.put(t1.getField(pred.getField1()), list);
            }
            list.add(t1);
            if (cnt++ == MAP_SIZE)
                return true;
        }
        return cnt > 0;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = new DbIterator[]{outter, outter};
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        outter = children[0];
        inner = children[1];
    }
    
}
